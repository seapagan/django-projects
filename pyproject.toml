[project]
name = "django-projects"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "django>=5.1.7",
    "django-cotton>=2.0.0",
    "django-ipware>=7.0.1",
    "django-permissions-policy>=4.25.0",
    "django-recaptcha>=4.0.0",
    "django-solo>=2.4.0",
    "django-stubs-ext>=5.1.3",
    "django-tailwind-cli>=4.1.0",
    "gunicorn>=23.0.0",
    "html-sanitizer>=2.5.0",
    "http-response-codes>=0.2.0",
    "httpx>=0.27.0",
    "lucide[django]>=1.1.3",
    "psycopg[binary]>=3.2.6",
    "pymemcache>=4.0.0",
    "python-dotenv>=1.0.1",
    "rjsmin>=1.2.4",
]

[dependency-groups]
dev = [
    "cookiecutter>=2.6.0",
    "django-browser-reload>=1.18.0",
    "django-stubs[compatible-mypy]>=5.1.3",
    "mypy>=1.15.0",
    "poethepoet>=0.33.0",
    "pre-commit>=4.1.0",
    "ruff>=0.10.0",
]

[tool.poe.tasks]
# setup PoeThePoet tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy . --strict"
mypy.help = "Run mypy checks"
format.help = "Format code with Ruff"
format.cmd = "ruff format ."
ruff.help = "Run Ruff checks"
ruff.cmd = "ruff check --output-format=concise ."

# serve the app
serve.cmd = "python manage.py tailwind runserver"
serve.help = "Run the Dev server, including tailwind"

# building for prod
"tw:build".cmd = "python manage.py tailwind build"
"tw:build".help = "Build an optimized production stylesheet"
"static".cmd = "python manage.py collectstatic"
"static".help = "Collect all the static files"

# testing tasks
test.help = "Run all tests using Pytest"
test.cmd = "pytest"
"test:unit".help = "Run only Unit tests using Pytest"
"test:unit".cmd = "pytest -m unit"
"test:integration".help = "Run only Integration tests using Pytest"
"test:integration".cmd = "pytest -m integration"
"test:skipped".cmd = "pytest --quiet --collect-only -m skip --no-cov"
"test:skipped".help = "Show skipped tests without running all tests"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy"]
lint.help = "Run all linting checks"

# populate data
"fixture:load".cmd = "python manage.py loaddata seed"

[tool.poe.tasks."fixture:dump"]
cmd = "python manage.py dumpdata app.siteconfiguration app.project app.tag app.language app.framework app.aboutsection"
capture_stdout = "app/fixtures/seed.json"

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
python_version = "3.10"
exclude = "manage.py"

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[tool.django-stubs]
django_settings_module = "config.settings"

[tool.ruff]
extend-exclude = ["app/apps.py", "app/migrations", "manage.py"]
line-length = 80
src = ["app"]
target-version = "py310"

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = ["ALL"] # we are being very strict!
ignore = [
    "PGH003",
    "FBT002",
    "FBT003",
    "B006",
] # These rules are too strict even for us üòù
extend-ignore = [
    "COM812", # ignored for ruff formatting
    "ISC001", # ignored for ruff formatting
    "T201",   # temporary ignore for now, will remove when migrate to logging
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",   # we can (and MUST!) use 'assert' in test files.
    "ANN001", # annotations for fixtures are sometimes a pain for test files.
    "ARG001", # sometimes fixtures are not physically used but have side-effects
    "ARG002", # as above
    "TD003",
    "FIX002",
    "RUF012",
]


[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true
